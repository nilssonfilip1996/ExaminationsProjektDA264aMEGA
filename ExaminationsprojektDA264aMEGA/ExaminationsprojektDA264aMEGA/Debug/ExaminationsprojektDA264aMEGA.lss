
ExaminationsprojektDA264aMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800200  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800336  00800336  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001609  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104c  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001426  00000000  00000000  00002d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00004134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001372c  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c1  00000000  00000000  00017aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00018161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004bd2  00000000  00000000  00018211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	2d c1       	rjmp	.+602    	; 0x2ec <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 33       	cpi	r26, 0x3D	; 61
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	24 d1       	rcall	.+584    	; 0x368 <main>
 120:	2b c1       	rjmp	.+598    	; 0x378 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay_1_micros>:
#include "delay.h"

#define QUARTER_1000 250

void delay_1_micros() {
	__asm("NOP");
 124:	00 00       	nop
	__asm("NOP");
 126:	00 00       	nop
	__asm("NOP");
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <delay_micros>:
}

void delay_micros(uint8_t us) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	for (uint8_t i = 0; i < us; ++i) {
 130:	88 23       	and	r24, r24
 132:	31 f0       	breq	.+12     	; 0x140 <delay_micros+0x14>
 134:	d8 2f       	mov	r29, r24
 136:	c0 e0       	ldi	r28, 0x00	; 0
		delay_1_micros();
 138:	f5 df       	rcall	.-22     	; 0x124 <delay_1_micros>
	__asm("NOP");
	__asm("NOP");
}

void delay_micros(uint8_t us) {
	for (uint8_t i = 0; i < us; ++i) {
 13a:	cf 5f       	subi	r28, 0xFF	; 255
 13c:	dc 13       	cpse	r29, r28
 13e:	fc cf       	rjmp	.-8      	; 0x138 <delay_micros+0xc>
		delay_1_micros();
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <delay_ms>:

void delay_ms(uint8_t ms) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	for (uint8_t i = 0; i < ms; ++i) {
 14a:	88 23       	and	r24, r24
 14c:	69 f0       	breq	.+26     	; 0x168 <delay_ms+0x22>
 14e:	d8 2f       	mov	r29, r24
 150:	c0 e0       	ldi	r28, 0x00	; 0
		delay_micros(QUARTER_1000);
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	eb df       	rcall	.-42     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 156:	8a ef       	ldi	r24, 0xFA	; 250
 158:	e9 df       	rcall	.-46     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 15a:	8a ef       	ldi	r24, 0xFA	; 250
 15c:	e7 df       	rcall	.-50     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 15e:	8a ef       	ldi	r24, 0xFA	; 250
 160:	e5 df       	rcall	.-54     	; 0x12c <delay_micros>
 162:	cf 5f       	subi	r28, 0xFF	; 255
		delay_1_micros();
	}
}

void delay_ms(uint8_t ms) {
	for (uint8_t i = 0; i < ms; ++i) {
 164:	dc 13       	cpse	r29, r28
 166:	f5 cf       	rjmp	.-22     	; 0x152 <delay_ms+0xc>
 168:	df 91       	pop	r29
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
	}
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <write_byte>:
 16e:	0f 93       	push	r16

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 178:	2e 98       	cbi	0x05, 6	; 5
 17a:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 17c:	c2 e0       	ldi	r28, 0x02	; 2
 17e:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 180:	00 23       	and	r16, r16
 182:	24 f4       	brge	.+8      	; 0x18c <write_byte+0x1e>
			SET_BIT(PORTH, 6);	// write 1
 184:	88 81       	ld	r24, Y
 186:	80 64       	ori	r24, 0x40	; 64
 188:	88 83       	st	Y, r24
 18a:	03 c0       	rjmp	.+6      	; 0x192 <write_byte+0x24>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 18c:	88 81       	ld	r24, Y
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	88 83       	st	Y, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 192:	88 81       	ld	r24, Y
 194:	80 62       	ori	r24, 0x20	; 32
 196:	88 83       	st	Y, r24
		delay_1_micros();
 198:	c5 df       	rcall	.-118    	; 0x124 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 19a:	88 81       	ld	r24, Y
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	88 83       	st	Y, r24
		// shift to next bit
		data = data << 1;
 1a0:	00 0f       	add	r16, r16
 1a2:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 1a4:	69 f7       	brne	.-38     	; 0x180 <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 1a6:	2e 9a       	sbi	0x05, 6	; 5
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	uint8_t character;
	uint8_t i;

	if (lcd_reg == CMD) {
 1b8:	81 11       	cpse	r24, r1
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <lcd_write+0x12>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 1bc:	2c 98       	cbi	0x05, 4	; 5
		// Write command
		write_byte(data);
 1be:	86 2f       	mov	r24, r22
 1c0:	d6 df       	rcall	.-84     	; 0x16e <write_byte>
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <lcd_write+0x3a>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 1c4:	2c 9a       	sbi	0x05, 4	; 5
 1c6:	60 52       	subi	r22, 0x20	; 32
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	eb 01       	movw	r28, r22
 1cc:	cc 0f       	add	r28, r28
 1ce:	dd 1f       	adc	r29, r29
 1d0:	cc 0f       	add	r28, r28
 1d2:	dd 1f       	adc	r29, r29
 1d4:	c6 0f       	add	r28, r22
 1d6:	d7 1f       	adc	r29, r23
 1d8:	c2 5f       	subi	r28, 0xF2	; 242
 1da:	dd 4f       	sbci	r29, 0xFD	; 253
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 1dc:	10 e0       	ldi	r17, 0x00	; 0
			write_byte(lcd_char_table[character][i]);
 1de:	89 91       	ld	r24, Y+
 1e0:	c6 df       	rcall	.-116    	; 0x16e <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 1e2:	1f 5f       	subi	r17, 0xFF	; 255
 1e4:	15 30       	cpi	r17, 0x05	; 5
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 1e6:	d9 f7       	brne	.-10     	; 0x1de <lcd_write+0x2c>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	c1 df       	rcall	.-126    	; 0x16e <write_byte>
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	08 95       	ret

000001f4 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 1f4:	e1 e0       	ldi	r30, 0x01	; 1
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 1fe:	80 81       	ld	r24, Z
 200:	80 64       	ori	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 204:	24 9a       	sbi	0x04, 4	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 206:	25 9a       	sbi	0x04, 5	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 208:	26 9a       	sbi	0x04, 6	; 4

	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	9c df       	rcall	.-200    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 20e:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(10);			// Wait a little...
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	99 df       	rcall	.-206    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 214:	2e 9a       	sbi	0x05, 6	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 216:	61 e2       	ldi	r22, 0x21	; 33
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	cb df       	rcall	.-106    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 21c:	63 e1       	ldi	r22, 0x13	; 19
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	c8 df       	rcall	.-112    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0xC5);	// Set Vop (contrast)
 222:	65 ec       	ldi	r22, 0xC5	; 197
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	c5 df       	rcall	.-118    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	c2 df       	rcall	.-124    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 22e:	60 e2       	ldi	r22, 0x20	; 32
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	bf df       	rcall	.-130    	; 0x1b2 <lcd_write>
 234:	6c e0       	ldi	r22, 0x0C	; 12
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	bc cf       	rjmp	.-136    	; 0x1b2 <lcd_write>
 23a:	08 95       	ret

0000023c <lcd_set_cursor_pos>:
 23c:	cf 93       	push	r28
 23e:	c6 2f       	mov	r28, r22
 *	col: 0-13 (col 1-14)
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	row = 0x40 | row;						// set row
	lcd_write(CMD, row);
 240:	68 2f       	mov	r22, r24
 242:	60 64       	ori	r22, 0x40	; 64
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	b5 df       	rcall	.-150    	; 0x1b2 <lcd_write>
	col = 0x80 | (col * CHR_TOTAL_WIDTH);	// set column
 248:	6c 2f       	mov	r22, r28
 24a:	66 0f       	add	r22, r22
 24c:	6c 0f       	add	r22, r28
 24e:	66 0f       	add	r22, r22
 250:	60 68       	ori	r22, 0x80	; 128
	lcd_write(CMD, col);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	ae df       	rcall	.-164    	; 0x1b2 <lcd_write>
}
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	for (uint8_t row = 0; row < 6; ++row){
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	0c c0       	rjmp	.+24     	; 0x27a <lcd_clear+0x20>
		for (uint8_t col = 0; col < 14; ++col) {
			lcd_set_cursor_pos(row, col);
 262:	6c 2f       	mov	r22, r28
 264:	8d 2f       	mov	r24, r29
 266:	ea df       	rcall	.-44     	; 0x23c <lcd_set_cursor_pos>
			lcd_write(CHR, 0x20);
 268:	60 e2       	ldi	r22, 0x20	; 32
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	a2 df       	rcall	.-188    	; 0x1b2 <lcd_write>
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for (uint8_t row = 0; row < 6; ++row){
		for (uint8_t col = 0; col < 14; ++col) {
 26e:	cf 5f       	subi	r28, 0xFF	; 255
 270:	ce 30       	cpi	r28, 0x0E	; 14
 272:	b9 f7       	brne	.-18     	; 0x262 <lcd_clear+0x8>
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for (uint8_t row = 0; row < 6; ++row){
 274:	df 5f       	subi	r29, 0xFF	; 255
 276:	d6 30       	cpi	r29, 0x06	; 6
 278:	11 f0       	breq	.+4      	; 0x27e <lcd_clear+0x24>

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	f2 cf       	rjmp	.-28     	; 0x262 <lcd_clear+0x8>
		for (uint8_t col = 0; col < 14; ++col) {
			lcd_set_cursor_pos(row, col);
			lcd_write(CHR, 0x20);
		}
	}
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <usart1_init>:
FILE mystdout = FDEV_SETUP_STREAM(usart1_putchar, NULL, _FDEV_SETUP_WRITE);

void usart1_init(void)
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(MYUBRR >> 8);
 284:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = (unsigned char)MYUBRR;
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 28e:	e9 ec       	ldi	r30, 0xC9	; 201
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	80 83       	st	Z, r24
	/* Enable interrupt */
	UCSR1B |= (1<<RXCIE1);
 296:	80 81       	ld	r24, Z
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	80 83       	st	Z, r24
	/* Set frame format: Async, No parity, 1 stop bit, 8 data */
	UCSR1C = (3<<UCSZ01);
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

	/* Re-rout stdout (printf) to use internal uart_putchar */
	stdout = &mystdout;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <__iob+0x3>
 2aa:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <__iob+0x2>
 2ae:	08 95       	ret

000002b0 <usart1_transmit>:


void usart1_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
 2b0:	e8 ec       	ldi	r30, 0xC8	; 200
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <usart1_transmit+0x4>
	/* Start transmission by loading data into the buffer */
	UDR1 = data;
 2ba:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 2be:	08 95       	ret

000002c0 <usart1_putchar>:
#define RADDR 0x55

volatile uint8_t lastchar = 0;

static int usart1_putchar(char c, FILE *unused)
{
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
	if (c == '\n')
 2c4:	8a 30       	cpi	r24, 0x0A	; 10
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <usart1_putchar+0x10>
	usart1_putchar('\r', 0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	8d e0       	ldi	r24, 0x0D	; 13
 2ce:	f8 df       	rcall	.-16     	; 0x2c0 <usart1_putchar>
	usart1_transmit(c);
 2d0:	8c 2f       	mov	r24, r28
 2d2:	ee df       	rcall	.-36     	; 0x2b0 <usart1_transmit>
	return 0;
}
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <usart1_getChar>:
	/* Start transmission by loading data into the buffer */
	UDR1 = data;
}

char usart1_getChar(void){
	while (!( UCSR1A & (1<<RXC1)));
 2dc:	e8 ec       	ldi	r30, 0xC8	; 200
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	88 23       	and	r24, r24
 2e4:	ec f7       	brge	.-6      	; 0x2e0 <usart1_getChar+0x4>
	return UDR1;
 2e6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
 2ea:	08 95       	ret

000002ec <__vector_36>:

ISR(USART1_RX_vect)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	cf 93       	push	r28
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	if(lastchar){
 314:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <__data_end>
 318:	88 23       	and	r24, r24
 31a:	19 f0       	breq	.+6      	; 0x322 <__vector_36+0x36>
		lcd_clear();
 31c:	9e df       	rcall	.-196    	; 0x25a <lcd_clear>
		lastchar=0;
 31e:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <__data_end>
	}
	//define variables
	uint8_t raddress, data, chk;//transmitter address
	//receive destination address
	raddress=usart1_getChar();
 322:	dc df       	rcall	.-72     	; 0x2dc <usart1_getChar>
	//receive data
	data=usart1_getChar();
 324:	c8 2f       	mov	r28, r24
 326:	da df       	rcall	.-76     	; 0x2dc <usart1_getChar>
	//chk=uart0_getChar();
	//compare received checksum with calculated
	//if(chk==(raddress+data)){//if match perform operations

		//if transmitter address match
		if(raddress==RADDR)
 328:	c5 35       	cpi	r28, 0x55	; 85
 32a:	49 f4       	brne	.+18     	; 0x33e <__vector_36+0x52>
		{
			if (data==0x00)		//end of received message.
 32c:	81 11       	cpse	r24, r1
 32e:	04 c0       	rjmp	.+8      	; 0x338 <__vector_36+0x4c>
			{
				lastchar = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <__data_end>
			}
			else{
			lcd_write(CHR,data);
 336:	03 c0       	rjmp	.+6      	; 0x33e <__vector_36+0x52>
 338:	68 2f       	mov	r22, r24
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	3a df       	rcall	.-396    	; 0x1b2 <lcd_write>
			}
		}

	//}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	cf 91       	pop	r28
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0b be       	out	0x3b, r0	; 59
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 366:	08 95       	ret

00000368 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	
	board_init();
 368:	fe df       	rcall	.-4      	; 0x366 <board_init>
	sei();
	usart1_init();
 36a:	78 94       	sei
	lcd_init();
 36c:	8b df       	rcall	.-234    	; 0x284 <usart1_init>
	lcd_clear();
 36e:	42 df       	rcall	.-380    	; 0x1f4 <lcd_init>
 370:	74 df       	rcall	.-280    	; 0x25a <lcd_clear>
	delay_ms(50);
 372:	82 e3       	ldi	r24, 0x32	; 50
 374:	e8 de       	rcall	.-560    	; 0x146 <delay_ms>
 376:	ff cf       	rjmp	.-2      	; 0x376 <main+0xe>

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
