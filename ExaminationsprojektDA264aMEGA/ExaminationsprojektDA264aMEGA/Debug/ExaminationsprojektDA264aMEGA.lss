
ExaminationsprojektDA264aMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800200  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  0080033a  0080033a  000009a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b80  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012aa  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6c  00000000  00000000  000039a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00005510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013892  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bda  00000000  00000000  000190ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00019c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000512d  00000000  00000000  00019d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8e c2       	rjmp	.+1308   	; 0x58a <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c3       	rjmp	.+1554   	; 0x6a4 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 35       	cpi	r26, 0x50	; 80
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	52 d3       	rcall	.+1700   	; 0x7c4 <main>
 120:	5a c3       	rjmp	.+1716   	; 0x7d6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay_1_micros>:
#include "delay.h"

#define QUARTER_1000 250

void delay_1_micros() {
	__asm("NOP");
 124:	00 00       	nop
	__asm("NOP");
 126:	00 00       	nop
	__asm("NOP");
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <delay_micros>:
}

void delay_micros(uint8_t us) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	for (uint8_t i = 0; i < us; ++i) {
 130:	88 23       	and	r24, r24
 132:	31 f0       	breq	.+12     	; 0x140 <delay_micros+0x14>
 134:	d8 2f       	mov	r29, r24
 136:	c0 e0       	ldi	r28, 0x00	; 0
		delay_1_micros();
 138:	f5 df       	rcall	.-22     	; 0x124 <delay_1_micros>
	__asm("NOP");
	__asm("NOP");
}

void delay_micros(uint8_t us) {
	for (uint8_t i = 0; i < us; ++i) {
 13a:	cf 5f       	subi	r28, 0xFF	; 255
 13c:	dc 13       	cpse	r29, r28
 13e:	fc cf       	rjmp	.-8      	; 0x138 <delay_micros+0xc>
		delay_1_micros();
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <delay_ms>:

void delay_ms(uint8_t ms) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	for (uint8_t i = 0; i < ms; ++i) {
 14a:	88 23       	and	r24, r24
 14c:	69 f0       	breq	.+26     	; 0x168 <delay_ms+0x22>
 14e:	d8 2f       	mov	r29, r24
 150:	c0 e0       	ldi	r28, 0x00	; 0
		delay_micros(QUARTER_1000);
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	eb df       	rcall	.-42     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 156:	8a ef       	ldi	r24, 0xFA	; 250
 158:	e9 df       	rcall	.-46     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 15a:	8a ef       	ldi	r24, 0xFA	; 250
 15c:	e7 df       	rcall	.-50     	; 0x12c <delay_micros>
		delay_micros(QUARTER_1000);
 15e:	8a ef       	ldi	r24, 0xFA	; 250
 160:	e5 df       	rcall	.-54     	; 0x12c <delay_micros>
 162:	cf 5f       	subi	r28, 0xFF	; 255
		delay_1_micros();
	}
}

void delay_ms(uint8_t ms) {
	for (uint8_t i = 0; i < ms; ++i) {
 164:	dc 13       	cpse	r29, r28
 166:	f5 cf       	rjmp	.-22     	; 0x152 <delay_ms+0xc>
 168:	df 91       	pop	r29
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
		delay_micros(QUARTER_1000);
	}
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <write_byte>:
 16e:	0f 93       	push	r16

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 178:	2e 98       	cbi	0x05, 6	; 5
 17a:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 17c:	c2 e0       	ldi	r28, 0x02	; 2
 17e:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 180:	00 23       	and	r16, r16
 182:	24 f4       	brge	.+8      	; 0x18c <write_byte+0x1e>
			SET_BIT(PORTH, 6);	// write 1
 184:	88 81       	ld	r24, Y
 186:	80 64       	ori	r24, 0x40	; 64
 188:	88 83       	st	Y, r24
 18a:	03 c0       	rjmp	.+6      	; 0x192 <write_byte+0x24>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 18c:	88 81       	ld	r24, Y
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	88 83       	st	Y, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 192:	88 81       	ld	r24, Y
 194:	80 62       	ori	r24, 0x20	; 32
 196:	88 83       	st	Y, r24
		delay_1_micros();
 198:	c5 df       	rcall	.-118    	; 0x124 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 19a:	88 81       	ld	r24, Y
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	88 83       	st	Y, r24
		// shift to next bit
		data = data << 1;
 1a0:	00 0f       	add	r16, r16
 1a2:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 1a4:	69 f7       	brne	.-38     	; 0x180 <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 1a6:	2e 9a       	sbi	0x05, 6	; 5
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	uint8_t character;
	uint8_t i;

	if (lcd_reg == CMD) {
 1b8:	81 11       	cpse	r24, r1
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <lcd_write+0x12>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 1bc:	2c 98       	cbi	0x05, 4	; 5
		// Write command
		write_byte(data);
 1be:	86 2f       	mov	r24, r22
 1c0:	d6 df       	rcall	.-84     	; 0x16e <write_byte>
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <lcd_write+0x3a>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 1c4:	2c 9a       	sbi	0x05, 4	; 5
 1c6:	60 52       	subi	r22, 0x20	; 32
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	eb 01       	movw	r28, r22
 1cc:	cc 0f       	add	r28, r28
 1ce:	dd 1f       	adc	r29, r29
 1d0:	cc 0f       	add	r28, r28
 1d2:	dd 1f       	adc	r29, r29
 1d4:	c6 0f       	add	r28, r22
 1d6:	d7 1f       	adc	r29, r23
 1d8:	c2 5f       	subi	r28, 0xF2	; 242
 1da:	dd 4f       	sbci	r29, 0xFD	; 253
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 1dc:	10 e0       	ldi	r17, 0x00	; 0
			write_byte(lcd_char_table[character][i]);
 1de:	89 91       	ld	r24, Y+
 1e0:	c6 df       	rcall	.-116    	; 0x16e <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 1e2:	1f 5f       	subi	r17, 0xFF	; 255
 1e4:	15 30       	cpi	r17, 0x05	; 5
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 1e6:	d9 f7       	brne	.-10     	; 0x1de <lcd_write+0x2c>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	c1 df       	rcall	.-126    	; 0x16e <write_byte>
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	08 95       	ret

000001f4 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 1f4:	e1 e0       	ldi	r30, 0x01	; 1
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 1fe:	80 81       	ld	r24, Z
 200:	80 64       	ori	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 204:	24 9a       	sbi	0x04, 4	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 206:	25 9a       	sbi	0x04, 5	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 208:	26 9a       	sbi	0x04, 6	; 4

	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	9c df       	rcall	.-200    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 20e:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(10);			// Wait a little...
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	99 df       	rcall	.-206    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 214:	2e 9a       	sbi	0x05, 6	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 216:	61 e2       	ldi	r22, 0x21	; 33
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	cb df       	rcall	.-106    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 21c:	63 e1       	ldi	r22, 0x13	; 19
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	c8 df       	rcall	.-112    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0xC5);	// Set Vop (contrast)
 222:	65 ec       	ldi	r22, 0xC5	; 197
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	c5 df       	rcall	.-118    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	c2 df       	rcall	.-124    	; 0x1b2 <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 22e:	60 e2       	ldi	r22, 0x20	; 32
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	bf df       	rcall	.-130    	; 0x1b2 <lcd_write>
 234:	6c e0       	ldi	r22, 0x0C	; 12
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	bc cf       	rjmp	.-136    	; 0x1b2 <lcd_write>
 23a:	08 95       	ret

0000023c <lcd_set_cursor_pos>:
 23c:	cf 93       	push	r28
 23e:	c6 2f       	mov	r28, r22
 *	col: 0-13 (col 1-14)
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	row = 0x40 | row;						// set row
	lcd_write(CMD, row);
 240:	68 2f       	mov	r22, r24
 242:	60 64       	ori	r22, 0x40	; 64
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	b5 df       	rcall	.-150    	; 0x1b2 <lcd_write>
	col = 0x80 | (col * CHR_TOTAL_WIDTH);	// set column
 248:	6c 2f       	mov	r22, r28
 24a:	66 0f       	add	r22, r22
 24c:	6c 0f       	add	r22, r28
 24e:	66 0f       	add	r22, r22
 250:	60 68       	ori	r22, 0x80	; 128
	lcd_write(CMD, col);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	ae df       	rcall	.-164    	; 0x1b2 <lcd_write>
}
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	for (uint8_t row = 0; row < 6; ++row){
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	0c c0       	rjmp	.+24     	; 0x27a <lcd_clear+0x20>
		for (uint8_t col = 0; col < 14; ++col) {
			lcd_set_cursor_pos(row, col);
 262:	6c 2f       	mov	r22, r28
 264:	8d 2f       	mov	r24, r29
 266:	ea df       	rcall	.-44     	; 0x23c <lcd_set_cursor_pos>
			lcd_write(CHR, 0x20);
 268:	60 e2       	ldi	r22, 0x20	; 32
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	a2 df       	rcall	.-188    	; 0x1b2 <lcd_write>
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for (uint8_t row = 0; row < 6; ++row){
		for (uint8_t col = 0; col < 14; ++col) {
 26e:	cf 5f       	subi	r28, 0xFF	; 255
 270:	ce 30       	cpi	r28, 0x0E	; 14
 272:	b9 f7       	brne	.-18     	; 0x262 <lcd_clear+0x8>
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for (uint8_t row = 0; row < 6; ++row){
 274:	df 5f       	subi	r29, 0xFF	; 255
 276:	d6 30       	cpi	r29, 0x06	; 6
 278:	11 f0       	breq	.+4      	; 0x27e <lcd_clear+0x24>

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	f2 cf       	rjmp	.-28     	; 0x262 <lcd_clear+0x8>
		for (uint8_t col = 0; col < 14; ++col) {
			lcd_set_cursor_pos(row, col);
			lcd_write(CHR, 0x20);
		}
	}
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <toBinary>:
	}
	uart_write_str("hej");
	toBinary(dataTosend);
}

void toBinary(uint8_t dataTosend []){
 284:	dc 01       	movw	r26, r24
	
	finalBits[0]=dataTosend[2];  //6
 286:	ef e3       	ldi	r30, 0x3F	; 63
 288:	f4 e0       	ldi	r31, 0x04	; 4
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	8c 91       	ld	r24, X
 28e:	12 97       	sbiw	r26, 0x02	; 2
 290:	80 83       	st	Z, r24
	finalBits[1]=dataTosend[4];  //5
 292:	14 96       	adiw	r26, 0x04	; 4
 294:	8c 91       	ld	r24, X
 296:	14 97       	sbiw	r26, 0x04	; 4
 298:	81 83       	std	Z+1, r24	; 0x01
	finalBits[2]=dataTosend[5];  //4
 29a:	15 96       	adiw	r26, 0x05	; 5
 29c:	8c 91       	ld	r24, X
 29e:	15 97       	sbiw	r26, 0x05	; 5
 2a0:	82 83       	std	Z+2, r24	; 0x02
	finalBits[3]=dataTosend[6];  //2
 2a2:	16 96       	adiw	r26, 0x06	; 6
 2a4:	8c 91       	ld	r24, X
 2a6:	83 83       	std	Z+3, r24	; 0x03
 2a8:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <correctBinary>
	
	for(int i=0; i<4;i++){
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
		
		if(finalBits[i]==1){
			correctBinary|=(1<<i);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	70 e0       	ldi	r23, 0x00	; 0
	finalBits[2]=dataTosend[5];  //4
	finalBits[3]=dataTosend[6];  //2
	
	for(int i=0; i<4;i++){
		
		if(finalBits[i]==1){
 2b4:	21 91       	ld	r18, Z+
 2b6:	21 30       	cpi	r18, 0x01	; 1
 2b8:	41 f4       	brne	.+16     	; 0x2ca <toBinary+0x46>
			correctBinary|=(1<<i);
 2ba:	ab 01       	movw	r20, r22
 2bc:	08 2e       	mov	r0, r24
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <toBinary+0x40>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <toBinary+0x3c>
 2c8:	34 2b       	or	r19, r20
	finalBits[0]=dataTosend[2];  //6
	finalBits[1]=dataTosend[4];  //5
	finalBits[2]=dataTosend[5];  //4
	finalBits[3]=dataTosend[6];  //2
	
	for(int i=0; i<4;i++){
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	91 05       	cpc	r25, r1
 2d0:	89 f7       	brne	.-30     	; 0x2b4 <toBinary+0x30>
 2d2:	30 93 43 04 	sts	0x0443, r19	; 0x800443 <correctBinary>
 2d6:	08 95       	ret

000002d8 <correctData>:
		correctData(wrongBit, dataReceived);
	}
	return correctBinary;
}

void correctData(int wrongBit, int dataTosend []){
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	eb 01       	movw	r28, r22
	int i;
	for(i=0; i<8;i++){
		if(dataTosend[wrongBit]==1){
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	fb 01       	movw	r30, r22
 2e4:	e8 0f       	add	r30, r24
 2e6:	f9 1f       	adc	r31, r25
 2e8:	20 81       	ld	r18, Z
 2ea:	31 81       	ldd	r19, Z+1	; 0x01
 2ec:	48 e0       	ldi	r20, 0x08	; 8
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	21 30       	cpi	r18, 0x01	; 1
 2f2:	31 05       	cpc	r19, r1
 2f4:	19 f4       	brne	.+6      	; 0x2fc <correctData+0x24>
			dataTosend[wrongBit]=0;
 2f6:	11 82       	std	Z+1, r1	; 0x01
 2f8:	10 82       	st	Z, r1
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <correctData+0x3a>
			i=8;
		}
		else if(dataTosend[wrongBit] == 0){
 2fc:	21 15       	cp	r18, r1
 2fe:	31 05       	cpc	r19, r1
 300:	29 f4       	brne	.+10     	; 0x30c <correctData+0x34>
			dataTosend[wrongBit]=1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
 30a:	03 c0       	rjmp	.+6      	; 0x312 <correctData+0x3a>
 30c:	41 50       	subi	r20, 0x01	; 1
 30e:	51 09       	sbc	r21, r1
	return correctBinary;
}

void correctData(int wrongBit, int dataTosend []){
	int i;
	for(i=0; i<8;i++){
 310:	79 f7       	brne	.-34     	; 0x2f0 <correctData+0x18>
		else if(dataTosend[wrongBit] == 0){
			dataTosend[wrongBit]=1;
			i=8;
		}
	}
	uart_write_str("hej");
 312:	85 e3       	ldi	r24, 0x35	; 53
 314:	93 e0       	ldi	r25, 0x03	; 3
 316:	6e d1       	rcall	.+732    	; 0x5f4 <uart_write_str>
	toBinary(dataTosend);
 318:	ce 01       	movw	r24, r28
 31a:	b4 df       	rcall	.-152    	; 0x284 <toBinary>
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <recievedData>:

int wrongBit;
int checkBit [3];
uint8_t finalBits[4];
uint8_t correctBinary;
uint8_t recievedData(uint8_t dataReceived[]){
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	fc 01       	movw	r30, r24
	finalBits[0] = 0;
 32c:	af e3       	ldi	r26, 0x3F	; 63
 32e:	b4 e0       	ldi	r27, 0x04	; 4
 330:	1c 92       	st	X, r1
	finalBits[1] = 0;
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	1c 92       	st	X, r1
 336:	11 97       	sbiw	r26, 0x01	; 1
	finalBits[2] = 0;
 338:	12 96       	adiw	r26, 0x02	; 2
 33a:	1c 92       	st	X, r1
 33c:	12 97       	sbiw	r26, 0x02	; 2
	finalBits[3] = 0;
 33e:	13 96       	adiw	r26, 0x03	; 3
 340:	1c 92       	st	X, r1
	correctBinary = 0;
 342:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <correctBinary>
	
	dataReceived[7]=0;			// Make sure that the last bit is set to zero
 346:	17 82       	std	Z+7, r1	; 0x07
// 		uart_write_str(str);
// 	 	sprintf(str, "Check2: %d\n",dataReceived[3]);
// 	 	uart_write_str(str);

	
	checkBit[0]=dataReceived[0];
 348:	00 81       	ld	r16, Z
 34a:	10 e0       	ldi	r17, 0x00	; 0
 34c:	a4 e4       	ldi	r26, 0x44	; 68
 34e:	b4 e0       	ldi	r27, 0x04	; 4
 350:	11 96       	adiw	r26, 0x01	; 1
 352:	1c 93       	st	X, r17
 354:	0e 93       	st	-X, r16
	checkBit[1]=dataReceived[1];
 356:	21 81       	ldd	r18, Z+1	; 0x01
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	13 96       	adiw	r26, 0x03	; 3
 35c:	3c 93       	st	X, r19
 35e:	2e 93       	st	-X, r18
 360:	12 97       	sbiw	r26, 0x02	; 2
	checkBit[2]=dataReceived[3];
 362:	43 81       	ldd	r20, Z+3	; 0x03
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	15 96       	adiw	r26, 0x05	; 5
 368:	5c 93       	st	X, r21
 36a:	4e 93       	st	-X, r20
 36c:	14 97       	sbiw	r26, 0x04	; 4
	
	p1 =(checkBit[0] + dataReceived[2] + dataReceived[4] + dataReceived[6]);
 36e:	c2 81       	ldd	r28, Z+2	; 0x02
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	a4 81       	ldd	r26, Z+4	; 0x04
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	66 81       	ldd	r22, Z+6	; 0x06
 378:	70 e0       	ldi	r23, 0x00	; 0
	p2 =(checkBit[1] + dataReceived[2] + dataReceived[5] + dataReceived[6]);
 37a:	85 81       	ldd	r24, Z+5	; 0x05
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	2c 0f       	add	r18, r28
 380:	3d 1f       	adc	r19, r29
 382:	28 0f       	add	r18, r24
 384:	39 1f       	adc	r19, r25
 386:	26 0f       	add	r18, r22
 388:	37 1f       	adc	r19, r23
	p3 =(checkBit[2] + dataReceived[4] + dataReceived[5] + dataReceived[6]);
 38a:	4a 0f       	add	r20, r26
 38c:	5b 1f       	adc	r21, r27
 38e:	48 0f       	add	r20, r24
 390:	59 1f       	adc	r21, r25
 392:	46 0f       	add	r20, r22
 394:	57 1f       	adc	r21, r23

	if(p1%2==0){
 396:	c0 0f       	add	r28, r16
 398:	d1 1f       	adc	r29, r17
 39a:	ac 0f       	add	r26, r28
 39c:	bd 1f       	adc	r27, r29
 39e:	6a 0f       	add	r22, r26
 3a0:	7b 1f       	adc	r23, r27
 3a2:	60 fd       	sbrc	r22, 0
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <recievedData+0x8e>
		checkBit[0]=0;
 3a6:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <checkBit+0x1>
 3aa:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <checkBit>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <recievedData+0x9a>
	}
	else{
		checkBit[0]=1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <checkBit+0x1>
 3b8:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <checkBit>
	}
	if(p2%2==0){
 3bc:	20 fd       	sbrc	r18, 0
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <recievedData+0xa8>
		checkBit[1]=0;
 3c0:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <checkBit+0x3>
 3c4:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <checkBit+0x2>
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <recievedData+0xb4>
	}
	else{
		checkBit[1]=1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <checkBit+0x3>
 3d2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <checkBit+0x2>
	}

	if(p3%2==0){
 3d6:	40 fd       	sbrc	r20, 0
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <recievedData+0xc2>
		checkBit[2]=0;
 3da:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <checkBit+0x5>
 3de:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <checkBit+0x4>
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <recievedData+0xce>
	}
	else{
		checkBit[2]=1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <checkBit+0x5>
 3ec:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <checkBit+0x4>
	// 	 	sprintf(str, "Check1: %d\n",checkBit[1]);
	//      	uart_write_str(str);
	// 	 	sprintf(str, "Check2: %d\n",checkBit[3]);
	// 	 	uart_write_str(str);

	if(checkBit[0]==0 && checkBit[1]==0 && checkBit[2]==0){
 3f0:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <checkBit>
 3f4:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <checkBit+0x1>
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	91 f4       	brne	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fc:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 400:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 404:	89 2b       	or	r24, r25
 406:	29 f5       	brne	.+74     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 408:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 40c:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 410:	89 2b       	or	r24, r25
 412:	09 f0       	breq	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	94 c0       	rjmp	.+296    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		toBinary(dataReceived);
 416:	cf 01       	movw	r24, r30
 418:	35 df       	rcall	.-406    	; 0x284 <toBinary>
		//	char str[20];
		//	sprintf(str, "correctBinary: %d\n",correctBinary);
		//uart_write_str(str);
		return correctBinary;
 41a:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <correctBinary>
 41e:	b0 c0       	rjmp	.+352    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
	}
	else if(checkBit[0]==1 && checkBit[1]==0 && checkBit[2]==0){            //bit 1
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	89 c0       	rjmp	.+274    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 426:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 42a:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 42e:	89 2b       	or	r24, r25
 430:	41 f5       	brne	.+80     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 432:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 436:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 43a:	89 2b       	or	r24, r25
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	87 c0       	rjmp	.+270    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		/*printf("Checkbit 0 is wrong");*/
		wrongBit=0;
 440:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <wrongBit+0x1>
 444:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <wrongBit>
		//uart_write_str("HEJJJJJJJJJJ");
		correctData(wrongBit, dataReceived);
 448:	bf 01       	movw	r22, r30
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	44 df       	rcall	.-376    	; 0x2d8 <correctData>
 450:	73 c0       	rjmp	.+230    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	}
	else if(checkBit[0]==0 && checkBit[1]==1 && checkBit[2]==0){            // Bit 2
 452:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 456:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	91 05       	cpc	r25, r1
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	7e c0       	rjmp	.+252    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 462:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 466:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 46a:	89 2b       	or	r24, r25
 46c:	09 f0       	breq	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	3f c0       	rjmp	.+126    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		/*printf("Checkbit 1 is wrong");*/
		wrongBit=1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 478:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>

		correctData(wrongBit, dataReceived);
 47c:	bf 01       	movw	r22, r30
 47e:	2c df       	rcall	.-424    	; 0x2d8 <correctData>
 480:	5b c0       	rjmp	.+182    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>

	}
	else if(checkBit[0]==1 && checkBit[1]==1 && checkBit[2]==0){            //bit 3
 482:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 486:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	70 c0       	rjmp	.+224    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 490:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 494:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 498:	89 2b       	or	r24, r25
 49a:	09 f0       	breq	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	64 c0       	rjmp	.+200    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
		/*printf("Checkbit 2 is wrong");*/
		wrongBit=2;
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 4a6:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>
		correctData(wrongBit, dataReceived);
 4aa:	bf 01       	movw	r22, r30
 4ac:	15 df       	rcall	.-470    	; 0x2d8 <correctData>
 4ae:	44 c0       	rjmp	.+136    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	}
	else if(checkBit[0]==0 && checkBit[1]==0 && checkBit[2]==1){            // Bit 4
 4b0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 4b4:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	09 f0       	breq	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4bc:	3d c0       	rjmp	.+122    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 3 is wrong");*/
		wrongBit=3;
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 4c6:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>
		correctData(wrongBit, dataReceived);
 4ca:	bf 01       	movw	r22, r30
 4cc:	05 df       	rcall	.-502    	; 0x2d8 <correctData>
 4ce:	34 c0       	rjmp	.+104    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	}
	else if(checkBit[0]==1 && checkBit[1]==0 && checkBit[2]==1){            // Bit 5
 4d0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 4d4:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	71 f5       	brne	.+92     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 4 is wrong \n");*/
		wrongBit=4;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 4e4:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>
		correctData(wrongBit, dataReceived);
 4e8:	bf 01       	movw	r22, r30
 4ea:	f6 de       	rcall	.-532    	; 0x2d8 <correctData>
 4ec:	25 c0       	rjmp	.+74     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	}
	else if(checkBit[0]==0 && checkBit[1]==1 && checkBit[2]==1){            //bit 6
 4ee:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 4f2:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f9 f4       	brne	.+62     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 4fa:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 4fe:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	c9 f4       	brne	.+50     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 5 is wrong");*/
		wrongBit=5;
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 50e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>
		correctData(wrongBit, dataReceived);
 512:	bf 01       	movw	r22, r30
 514:	e1 de       	rcall	.-574    	; 0x2d8 <correctData>
 516:	10 c0       	rjmp	.+32     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	}
	else if(checkBit[0]==1 && checkBit[1]==1 && checkBit[2]==1){            // Bit 7
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	71 f4       	brne	.+28     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 51c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <checkBit+0x4>
 520:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <checkBit+0x5>
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	41 f4       	brne	.+16     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 6 is wrong");*/
		wrongBit=6;
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <wrongBit+0x1>
 530:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <wrongBit>
		correctData(wrongBit, dataReceived);
 534:	bf 01       	movw	r22, r30
 536:	d0 de       	rcall	.-608    	; 0x2d8 <correctData>
	}
	return correctBinary;
 538:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <correctBinary>
 53c:	21 c0       	rjmp	.+66     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
	else if(checkBit[0]==1 && checkBit[1]==1 && checkBit[2]==0){            //bit 3
		/*printf("Checkbit 2 is wrong");*/
		wrongBit=2;
		correctData(wrongBit, dataReceived);
	}
	else if(checkBit[0]==0 && checkBit[1]==0 && checkBit[2]==1){            // Bit 4
 53e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 542:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 546:	89 2b       	or	r24, r25
 548:	09 f4       	brne	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54a:	b2 cf       	rjmp	.-156    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 54c:	d0 cf       	rjmp	.-96     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		/*printf("Checkbit 3 is wrong");*/
		wrongBit=3;
		correctData(wrongBit, dataReceived);
	}
	else if(checkBit[0]==1 && checkBit[1]==0 && checkBit[2]==1){            // Bit 5
 54e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 552:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 556:	00 97       	sbiw	r24, 0x00	; 0
 558:	09 f4       	brne	.+2      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 55a:	ba cf       	rjmp	.-140    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 55c:	dd cf       	rjmp	.-70     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
	else if(checkBit[0]==1 && checkBit[1]==1 && checkBit[2]==0){            //bit 3
		/*printf("Checkbit 2 is wrong");*/
		wrongBit=2;
		correctData(wrongBit, dataReceived);
	}
	else if(checkBit[0]==0 && checkBit[1]==0 && checkBit[2]==1){            // Bit 4
 55e:	89 2b       	or	r24, r25
 560:	09 f4       	brne	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	a6 cf       	rjmp	.-180    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 564:	e9 cf       	rjmp	.-46     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 3 is wrong");*/
		wrongBit=3;
		correctData(wrongBit, dataReceived);
	}
	else if(checkBit[0]==1 && checkBit[1]==0 && checkBit[2]==1){            // Bit 5
 566:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 56a:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 56e:	d4 cf       	rjmp	.-88     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 570:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <checkBit+0x2>
 574:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <checkBit+0x3>
 578:	89 2b       	or	r24, r25
 57a:	09 f4       	brne	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	a9 cf       	rjmp	.-174    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 57e:	dc cf       	rjmp	.-72     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		/*printf("Checkbit 6 is wrong");*/
		wrongBit=6;
		correctData(wrongBit, dataReceived);
	}
	return correctBinary;
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <__vector_27>:
	char serial_buffer[TX_BUFFER_SIZE];
	uint8_t serial_read_pos;
	uint8_t serial_write_pos;
} me;

ISR(USART0_TX_vect) {
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	0b b6       	in	r0, 0x3b	; 59
 596:	0f 92       	push	r0
 598:	8f 93       	push	r24
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	if (me.serial_read_pos != me.serial_write_pos){
 59e:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <__data_end+0x100>
 5a2:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <__data_end+0x101>
 5a6:	e8 17       	cp	r30, r24
 5a8:	59 f0       	breq	.+22     	; 0x5c0 <__vector_27+0x36>
		UDR0 = me.serial_buffer[me.serial_read_pos];
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	e6 5c       	subi	r30, 0xC6	; 198
 5ae:	fc 4f       	sbci	r31, 0xFC	; 252
 5b0:	80 81       	ld	r24, Z
 5b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		me.serial_read_pos++;
 5b6:	ea e3       	ldi	r30, 0x3A	; 58
 5b8:	f4 e0       	ldi	r31, 0x04	; 4
 5ba:	80 81       	ld	r24, Z
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	80 83       	st	Z, r24

		if (me.serial_read_pos >= TX_BUFFER_SIZE)
			me.serial_read_pos = 0;
	}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	8f 91       	pop	r24
 5c6:	0f 90       	pop	r0
 5c8:	0b be       	out	0x3b, r0	; 59
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <uart_init>:
void uart_init(void) {
	/*
	 * Set Baud rate by setting BRCC value, for some reason
	 * the high register only uses right nibble...
	 */
	UBRR0H = (BRC >> 8);
 5d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = BRC;
 5d8:	87 e6       	ldi	r24, 0x67	; 103
 5da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	/* Enable both transmit and receive, as well as interrupts for both */
	UCSR0B = (1 << TXEN0)  | (1 << RXEN0) | (1 << TXCIE0);
 5de:	88 e5       	ldi	r24, 0x58	; 88
 5e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	/* Set async-mode, 8-bit data, 1 stop-bit and no parity */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 5e4:	86 e0       	ldi	r24, 0x06	; 6
 5e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	me.serial_write_pos = 0;
 5ea:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <__data_end+0x101>
	me.serial_read_pos = 0;
 5ee:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <__data_end+0x100>
 5f2:	08 95       	ret

000005f4 <uart_write_str>:
}

/* Send over a string, do not send more than 500 characters per second */

void uart_write_str(char *str){
 5f4:	dc 01       	movw	r26, r24
	while((*str) != '\0') {
 5f6:	9c 91       	ld	r25, X
 5f8:	99 23       	and	r25, r25
 5fa:	71 f0       	breq	.+28     	; 0x618 <uart_write_str+0x24>
 5fc:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <__data_end+0x101>
 600:	11 96       	adiw	r26, 0x01	; 1
			me.serial_read_pos = 0;
	}
}

static void uart_append_serial(char chr) {
	me.serial_buffer[me.serial_write_pos] = chr;
 602:	e2 2f       	mov	r30, r18
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	e6 5c       	subi	r30, 0xC6	; 198
 608:	fc 4f       	sbci	r31, 0xFC	; 252
 60a:	90 83       	st	Z, r25
	me.serial_write_pos++;
 60c:	2f 5f       	subi	r18, 0xFF	; 255
}

/* Send over a string, do not send more than 500 characters per second */

void uart_write_str(char *str){
	while((*str) != '\0') {
 60e:	9d 91       	ld	r25, X+
 610:	91 11       	cpse	r25, r1
 612:	f7 cf       	rjmp	.-18     	; 0x602 <uart_write_str+0xe>
 614:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <__data_end+0x101>
			me.serial_read_pos = 0;
	}
}

static void uart_append_serial(char chr) {
	me.serial_buffer[me.serial_write_pos] = chr;
 618:	ab e3       	ldi	r26, 0x3B	; 59
 61a:	b4 e0       	ldi	r27, 0x04	; 4
 61c:	8c 91       	ld	r24, X
 61e:	e8 2f       	mov	r30, r24
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	e6 5c       	subi	r30, 0xC6	; 198
 624:	fc 4f       	sbci	r31, 0xFC	; 252
 626:	9d e0       	ldi	r25, 0x0D	; 13
 628:	90 83       	st	Z, r25
	me.serial_write_pos++;
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	8c 93       	st	X, r24

	/*
	 * If we reach the end of earlier transmission, we need to reset the buffer
	 * in order for the interrupt to keep working.
	 */
	if (UCSR0A & (1 << UDRE0))
 62e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 632:	85 fd       	sbrc	r24, 5
		UDR0 = 0;
 634:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 638:	08 95       	ret

0000063a <usart1_init>:
FILE mystdout = FDEV_SETUP_STREAM(usart1_putchar, NULL, _FDEV_SETUP_WRITE);

void usart1_init(void)
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(MYUBRR >> 8);
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = (unsigned char)MYUBRR;
 640:	80 e4       	ldi	r24, 0x40	; 64
 642:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 646:	e9 ec       	ldi	r30, 0xC9	; 201
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	88 e1       	ldi	r24, 0x18	; 24
 64c:	80 83       	st	Z, r24
	/* Enable interrupt */
	UCSR1B |= (1<<RXCIE1);
 64e:	80 81       	ld	r24, Z
 650:	80 68       	ori	r24, 0x80	; 128
 652:	80 83       	st	Z, r24
	/* Set frame format: Async, No parity, 1 stop bit, 8 data */
	UCSR1C = (3<<UCSZ01);
 654:	8c e0       	ldi	r24, 0x0C	; 12
 656:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	/* Re-rout stdout (printf) to use internal uart_putchar */
	stdout = &mystdout;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <__iob+0x3>
 662:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__iob+0x2>
 666:	08 95       	ret

00000668 <usart1_transmit>:


void usart1_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
 668:	e8 ec       	ldi	r30, 0xC8	; 200
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	90 81       	ld	r25, Z
 66e:	95 ff       	sbrs	r25, 5
 670:	fd cf       	rjmp	.-6      	; 0x66c <usart1_transmit+0x4>
	/* Start transmission by loading data into the buffer */
	UDR1 = data;
 672:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 676:	08 95       	ret

00000678 <usart1_putchar>:
#define RADDR 0x05		//0x55

volatile uint8_t lastchar = 0;

static int usart1_putchar(char c, FILE *unused)
{
 678:	cf 93       	push	r28
 67a:	c8 2f       	mov	r28, r24
	if (c == '\n')
 67c:	8a 30       	cpi	r24, 0x0A	; 10
 67e:	21 f4       	brne	.+8      	; 0x688 <usart1_putchar+0x10>
	usart1_putchar('\r', 0);
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	8d e0       	ldi	r24, 0x0D	; 13
 686:	f8 df       	rcall	.-16     	; 0x678 <usart1_putchar>
	usart1_transmit(c);
 688:	8c 2f       	mov	r24, r28
 68a:	ee df       	rcall	.-36     	; 0x668 <usart1_transmit>
	return 0;
}
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <usart1_getChar>:
	/* Start transmission by loading data into the buffer */
	UDR1 = data;
}

char usart1_getChar(void){
	while (!( UCSR1A & (1<<RXC1)));
 694:	e8 ec       	ldi	r30, 0xC8	; 200
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	88 23       	and	r24, r24
 69c:	ec f7       	brge	.-6      	; 0x698 <usart1_getChar+0x4>
	return UDR1;
 69e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
 6a2:	08 95       	ret

000006a4 <__vector_36>:

ISR(USART1_RX_vect)
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	0b b6       	in	r0, 0x3b	; 59
 6b0:	0f 92       	push	r0
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	60 97       	sbiw	r28, 0x10	; 16
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	cd bf       	out	0x3d, r28	; 61
	if(lastchar){		//Clear the screen when a we have a new string incomming.
 6dc:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <lastchar>
 6e0:	88 23       	and	r24, r24
 6e2:	19 f0       	breq	.+6      	; 0x6ea <__vector_36+0x46>
		lcd_clear();
 6e4:	ba dd       	rcall	.-1164   	; 0x25a <lcd_clear>
		lastchar=0;
 6e6:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <lastchar>
	//define variables
	uint8_t raddress, rdata, addr, data;//transmitter address
	//uint8_t syncro = usart1_getChar();
	
	//receive destination address
	raddress=usart1_getChar();
 6ea:	d4 df       	rcall	.-88     	; 0x694 <usart1_getChar>

	
	//receive data
	rdata=usart1_getChar();
 6ec:	08 2f       	mov	r16, r24
 6ee:	d2 df       	rcall	.-92     	; 0x694 <usart1_getChar>
 6f0:	18 2f       	mov	r17, r24
	uint8_t byteArrayAddr[8] = {0};
 6f2:	88 e0       	ldi	r24, 0x08	; 8
 6f4:	fe 01       	movw	r30, r28
 6f6:	31 96       	adiw	r30, 0x01	; 1
 6f8:	df 01       	movw	r26, r30
 6fa:	98 2f       	mov	r25, r24
 6fc:	1d 92       	st	X+, r1
 6fe:	9a 95       	dec	r25
 700:	e9 f7       	brne	.-6      	; 0x6fc <__vector_36+0x58>
	uint8_t byteArrayData[8] = {0};
 702:	9e 01       	movw	r18, r28
 704:	27 5f       	subi	r18, 0xF7	; 247
 706:	3f 4f       	sbci	r19, 0xFF	; 255
 708:	d9 01       	movw	r26, r18
 70a:	1d 92       	st	X+, r1
 70c:	8a 95       	dec	r24
 70e:	e9 f7       	brne	.-6      	; 0x70a <__vector_36+0x66>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0; i<8; i++){
		if((raddress & (1<<i)) !=0){
 714:	80 2f       	mov	r24, r16
 716:	90 e0       	ldi	r25, 0x00	; 0
			byteArrayAddr[i] = 1;
 718:	61 e0       	ldi	r22, 0x01	; 1
	//receive data
	rdata=usart1_getChar();
	uint8_t byteArrayAddr[8] = {0};
	uint8_t byteArrayData[8] = {0};
	for(uint8_t i=0; i<8; i++){
		if((raddress & (1<<i)) !=0){
 71a:	ac 01       	movw	r20, r24
 71c:	02 2e       	mov	r0, r18
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__vector_36+0x80>
 720:	55 95       	asr	r21
 722:	47 95       	ror	r20
 724:	0a 94       	dec	r0
 726:	e2 f7       	brpl	.-8      	; 0x720 <__vector_36+0x7c>
 728:	40 fd       	sbrc	r20, 0
			byteArrayAddr[i] = 1;
 72a:	60 83       	st	Z, r22
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	31 96       	adiw	r30, 0x01	; 1
	
	//receive data
	rdata=usart1_getChar();
	uint8_t byteArrayAddr[8] = {0};
	uint8_t byteArrayData[8] = {0};
	for(uint8_t i=0; i<8; i++){
 732:	28 30       	cpi	r18, 0x08	; 8
 734:	31 05       	cpc	r19, r1
		if((raddress & (1<<i)) !=0){
			byteArrayAddr[i] = 1;
		}
	}
	addr = recievedData(byteArrayAddr);
 736:	89 f7       	brne	.-30     	; 0x71a <__vector_36+0x76>
 738:	ce 01       	movw	r24, r28
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	f2 dd       	rcall	.-1052   	; 0x322 <recievedData>
 73e:	08 2f       	mov	r16, r24
 740:	fe 01       	movw	r30, r28
 742:	39 96       	adiw	r30, 0x09	; 9
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
	
	//if(rdata!=0x01){
	for(uint8_t i=0; i<8; i++){
		if((rdata & (1<<i)) !=0){
 748:	41 2f       	mov	r20, r17
 74a:	50 e0       	ldi	r21, 0x00	; 0
			byteArrayData[i] = 1;
 74c:	61 e0       	ldi	r22, 0x01	; 1
	}
	addr = recievedData(byteArrayAddr);
	
	//if(rdata!=0x01){
	for(uint8_t i=0; i<8; i++){
		if((rdata & (1<<i)) !=0){
 74e:	9a 01       	movw	r18, r20
 750:	08 2e       	mov	r0, r24
 752:	02 c0       	rjmp	.+4      	; 0x758 <__vector_36+0xb4>
 754:	35 95       	asr	r19
 756:	27 95       	ror	r18
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <__vector_36+0xb0>
 75c:	20 fd       	sbrc	r18, 0
			byteArrayData[i] = 1;
 75e:	60 83       	st	Z, r22
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	31 96       	adiw	r30, 0x01	; 1
		}
	}
	addr = recievedData(byteArrayAddr);
	
	//if(rdata!=0x01){
	for(uint8_t i=0; i<8; i++){
 764:	88 30       	cpi	r24, 0x08	; 8
 766:	91 05       	cpc	r25, r1
		if((rdata & (1<<i)) !=0){
			byteArrayData[i] = 1;
		}
	}
	data = recievedData(byteArrayData);
 768:	91 f7       	brne	.-28     	; 0x74e <__vector_36+0xaa>
 76a:	ce 01       	movw	r24, r28
 76c:	09 96       	adiw	r24, 0x09	; 9
 76e:	d9 dd       	rcall	.-1102   	; 0x322 <recievedData>
	//}
	if(addr==RADDR)
 770:	05 30       	cpi	r16, 0x05	; 5
 772:	51 f4       	brne	.+20     	; 0x788 <__vector_36+0xe4>
	{
		if (rdata==0x01)		//end of received message.
 774:	11 30       	cpi	r17, 0x01	; 1
 776:	21 f4       	brne	.+8      	; 0x780 <__vector_36+0xdc>
		{
			lastchar = 1;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <lastchar>
		}
		else{
			data = data + 0x30;
			lcd_write(CHR,data);
 77e:	04 c0       	rjmp	.+8      	; 0x788 <__vector_36+0xe4>
 780:	60 e3       	ldi	r22, 0x30	; 48
 782:	68 0f       	add	r22, r24
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	15 dd       	rcall	.-1494   	; 0x1b2 <lcd_write>
		}
	}
 788:	60 96       	adiw	r28, 0x10	; 16
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	ff 91       	pop	r31
 79a:	ef 91       	pop	r30
 79c:	bf 91       	pop	r27
 79e:	af 91       	pop	r26
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	7f 91       	pop	r23
 7a6:	6f 91       	pop	r22
 7a8:	5f 91       	pop	r21
 7aa:	4f 91       	pop	r20
 7ac:	3f 91       	pop	r19
 7ae:	2f 91       	pop	r18
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	0f 90       	pop	r0
 7b6:	0b be       	out	0x3b, r0	; 59
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 7c2:	08 95       	ret

000007c4 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	
	board_init();
 7c4:	fe df       	rcall	.-4      	; 0x7c2 <board_init>
	sei();
	usart1_init();
 7c6:	78 94       	sei
	lcd_init();
 7c8:	38 df       	rcall	.-400    	; 0x63a <usart1_init>
	lcd_clear();
 7ca:	14 dd       	rcall	.-1496   	; 0x1f4 <lcd_init>
	delay_ms(50);
 7cc:	46 dd       	rcall	.-1396   	; 0x25a <lcd_clear>
 7ce:	82 e3       	ldi	r24, 0x32	; 50
 7d0:	ba dc       	rcall	.-1676   	; 0x146 <delay_ms>
	uart_init();
 7d2:	00 df       	rcall	.-512    	; 0x5d4 <uart_init>
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <main+0x10>

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
